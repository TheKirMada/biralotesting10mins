name: Create VPS (Auto-Restart & Safe)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360   # GitHub max (6 hours)
    env:
      TMATE_SERVER: nyc1.tmate.io

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true   # ensure pushes via token are allowed

      - name: üìÅ Prepare dirs
        run: mkdir -p links .backup

      - name: üíæ Restore backup (from transfer.sh link)
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          if [ -f last_backup_url.txt ]; then
            url=$(cat last_backup_url.txt)
            echo "üîÑ Downloading backup from $url"
            curl -s --fail "$url" -o vps_backup.tar.gz || { echo "‚ö†Ô∏è Failed to download backup (continuing)"; exit 0; }
            echo "üîß Extracting backup to / (requires sudo)..."
            sudo tar -xzf vps_backup.tar.gz -C / || { echo "‚ö†Ô∏è Failed to extract backup (continuing)"; exit 0; }
            echo "‚úÖ Backup restored."
          else
            echo "‚ö†Ô∏è No backup link found, starting fresh."
          fi

      - name: üîê Start tmate session
        run: |
          sudo apt update -y && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" | tee "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: üöÄ Start Playit Tunnel
        run: |
          wget -q https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-linux-amd64 -O playit
          chmod +x playit
          nohup ./playit > playit.log 2>&1 &
          echo "‚úÖ Playit started."

      - name: ‚è≥ Keep VPS alive (stop at 345 mins for safety)
        run: |
          # loop stops 15 minutes before GitHub kills the job at 360 minutes
          i=1
          while [ $i -le 345 ]; do
            echo "üü¢ Running minute $i/345..."
            sleep 60 || break
            i=$((i+1))
          done
          echo "üîî Loop ended at $i, proceeding to final backup."

      - name: üì¶ Final backup before timeout
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          echo "Creating backup of key system directories (smaller, reliable)..."
          # Archive important directories that preserve installed packages and service data:
          sudo tar czf vps_backup.tar.gz \
            /etc \
            /var \
            /usr/local \
            /home  \
            --exclude=/var/cache/apt/archives \
            --exclude=/var/tmp \
            --exclude=/var/cache/apt/archives/* \
            --exclude=/proc \
            --exclude=/sys \
            --exclude=/dev \
            --exclude=/run \
            --exclude=/tmp || true

          echo "Uploading archive to transfer.sh (may take time)..."
          url=$(curl -s --upload-file ./vps_backup.tar.gz https://transfer.sh/${name}_vps_backup.tar.gz)
          echo "üÜô Backup uploaded: $url"
          echo "$url" > last_backup_url.txt
          echo "Saved latest backup link to last_backup_url.txt"

      - name: üîÑ Pull latest changes (avoid push rejection)
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # ensure we have the latest main to reduce push conflicts
          git pull --rebase origin main || true

      - name: üì§ Save SSH link + backup URL
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üîÅ Updated SSH + backup URL for ${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          file_pattern: 'links/*.txt last_backup_url.txt'
          push_options: '--force'   # safe for backup-only repo; remove if you prefer not to force

      - name: üîÅ Restart workflow automatically
        if: always()
        run: |
          echo "üîÑ Triggering repository_dispatch to restart VPS..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"create-vps","client_payload":{"vps_name":"manual-vps","backup":true}}'

      # Failsafe backup step: attempt to run if earlier steps failed or job was cancelled before final backup
      - name: üì¶ Failsafe backup (attempt)
        if: failure() || cancelled()
        run: |
          echo "‚ö†Ô∏è Running failsafe backup (attempt) to capture current state..."
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          sudo tar czf vps_failsafe_backup.tar.gz \
            /etc \
            /var \
            /usr/local \
            /home \
            --exclude=/var/cache/apt/archives \
            --exclude=/var/tmp \
            --exclude=/proc \
            --exclude=/sys \
            --exclude=/dev \
            --exclude=/run \
            --exclude=/tmp || true

          url=$(curl -s --upload-file ./vps_failsafe_backup.tar.gz https://transfer.sh/${name}_vps_failsafe.tar.gz)
          echo "üÜô Failsafe backup uploaded: $url"
          echo "$url" > last_backup_url.txt

          # try to commit the failsafe link back to repo (best-effort)
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add last_backup_url.txt || true
          git commit -m "‚ö†Ô∏è Failsafe backup URL" || true
          git push origin main || true
