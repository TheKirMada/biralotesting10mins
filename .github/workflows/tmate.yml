name: Create VPS (Auto-Restart & Safe)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 8 # <--- CHANGE 1: Set to 8 minutes for testing
    env:
      TMATE_SERVER: nyc1.tmate.io

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v3

      - name: üìÅ Prepare dirs
        run: |
          mkdir -p links .backup /home/runner/pufferpanel/data
          # Set a flag to check if PufferPanel data exists BEFORE restore
          if [ ! -d "/home/runner/pufferpanel/data" ] || [ -z "$(ls -A /home/runner/pufferpanel/data)" ]; then
            echo "PUFFERPANEL_FIRST_RUN=true" >> $GITHUB_ENV
            echo "‚ö†Ô∏è First run detected for PufferPanel data directory."
          else
            echo "PUFFERPANEL_FIRST_RUN=false" >> $GITHUB_ENV
            echo "‚úÖ Existing PufferPanel data found."
          fi

      - name: üê≥ Install Docker (Required for PufferPanel)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          # Add current user (runner) to docker group to run without sudo
          sudo usermod -aG docker $USER
          echo "‚úÖ Docker installed and configured"
          
      - name: üõ†Ô∏è Make backup script executable
        run: chmod +x backup-restore.sh

      - name: üîß Setup Git identity
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: üíæ Restore backup from GitHub
        continue-on-error: true
        run: |
          echo "üîÑ Checking for GitHub backup..."
          if [ -f "vps_backup.tar.gz" ]; then
            echo "‚úÖ Found local backup, restoring to root (/) to restore PufferPanel data..."
            # Restores /home/runner/pufferpanel/data and /home/runner/pufferpanel/servers
            sudo tar -xzf vps_backup.tar.gz -C / 2>/dev/null || echo "Restore completed with warnings"
            echo "‚úÖ PufferPanel data should now be restored to /home/runner/pufferpanel/"
          else
            echo "‚ö†Ô∏è No local backup found - starting fresh"
          fi

      # --- NEW CRITICAL STEP: AUTOMATIC ADMIN USER CREATION ---
      - name: üë®‚Äçüíª Create PufferPanel Admin (If first run)
        if: env.PUFFERPANEL_FIRST_RUN == 'true'
        run: |
          echo "Initial setup: Creating admin user 'kirmada'..."
          # The user add command must be run only once during the initial setup
          # It uses the mounted volume to write the new user data to the /home/runner/pufferpanel/data directory
          docker run --rm \
            -v /home/runner/pufferpanel/data:/etc/pufferpanel \
            pufferpanel/pufferpanel:latest init \
            --email "xblankx79@gmail.com" \
            --password "kirmada2009" \
            --username "kirmada" \
            --admin
          echo "‚úÖ Admin user 'kirmada' created successfully."

      - name: üöÄ Start PufferPanel container
        run: |
          echo "üöÄ Starting PufferPanel container, bound to NGROK port 8080..."
          # The main docker run command for persistence (if data exists, it simply starts the panel)
          docker run -d \
            -p 8080:8080 \
            -v /home/runner/pufferpanel/data:/etc/pufferpanel \
            -v /home/runner/pufferpanel/servers:/var/lib/pufferpanel \
            --name pufferpanel \
            --restart unless-stopped \
            pufferpanel/pufferpanel:latest
          echo "‚úÖ PufferPanel container started. Will automatically restart on future runner runs."
          
      - name: üîß Install and Setup ngrok
        run: |
          echo "üöÄ Installing ngrok..."
          # Download ngrok directly (no apt/sudo needed)
          wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          tar -xzf ngrok-v3-stable-linux-amd64.tgz
          chmod +x ngrok
          # NOTE: Replace the token below with your actual ngrok token
          ./ngrok config add-authtoken 2YtAp6D68sZQGP19tb6ArNsUu0K_7DxzsfFA52dXeYr6gbEEz
          echo "‚úÖ ngrok installed and configured"
          
          # Start ngrok tunnel in background and capture the public URL
          echo "üîÑ Starting ngrok tunnel on port 8080..."
          nohup ./ngrok http 8080 > ngrok.log 2>&1 &
          
          # Wait for ngrok to start and get the public URL
          sleep 15
          echo "üåê Ngrok Public URL:"
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*"' | head -1 | cut -d'"' -f4)
          if [ -n "$NGROK_URL" ]; then
            echo "‚úÖ Public URL for PufferPanel: $NGROK_URL"
            echo "$NGROK_URL" > ngrok_url.txt
            echo ""
            echo "üéØ Access your PufferPanel via HTTPS (Port 8080) at:"
            echo "üì° $NGROK_URL"
          else
            echo "‚ùå Could not retrieve ngrok URL. Check ngrok.log for details:"
            cat ngrok.log || echo "No ngrok log available"
          fi

      - name: üîê Start tmate session
        run: |
          sudo apt update -y && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" | tee "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo ""
          echo "üîë Connect to VPS via SSH:"
          echo "$SSH"

      - name: üöÄ Start Playit Tunnel
        run: |
          # Ensure current user can read/execute the playit executable if it was restored.
          chmod +x playit 2>/dev/null || true
          wget -q https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-linux-amd64 -O playit
          chmod +x playit
          nohup ./playit > playit.log 2>&1 &
          echo "‚úÖ Playit started."

      - name: ‚è≥ Keep VPS alive (5 min test period) # <--- CHANGE 2A: Updated name
        run: |
          i=1
          while [ $i -le 5 ]; do # <--- CHANGE 2B: Changed 15 to 5 minutes
            echo "üü¢ Running minute $i/5..." # <--- CHANGE 2C: Updated message
            sleep 60
            i=$((i+1))
          done

      - name: üì¶ COMPLETE Backup (Includes /home/runner)
        timeout-minutes: 15
        run: |
          echo "üöÄ Creating COMPLETE backup including /home/runner..."
          
          # Save package list
          mkdir -p backup_meta
          dpkg --get-selections > backup_meta/installed_packages.txt 2>/dev/null || true
          
          # Build list of directories to backup - NOW INCLUDES /home/runner
          BACKUP_DIRS="backup_meta"
          
          # Check and add directories that exist
          [ -d "/home/runner" ] && BACKUP_DIRS="$BACKUP_DIRS /home/runner"
          [ -f "./ngrok" ] && BACKUP_DIRS="$BACKUP_DIRS ./ngrok"
          [ -f "ngrok_url.txt" ] && BACKUP_DIRS="$BACKUP_DIRS ngrok_url.txt"
          
          echo "üì¶ Backing up: $BACKUP_DIRS"
          
          # Create backup (must run with sudo as /home/runner/pufferpanel/data might have root-owned files from docker)
          sudo tar -czf vps_backup.tar.gz $BACKUP_DIRS 2>/dev/null || true
          
          echo "‚úÖ Backup created successfully (size: $(du -h vps_backup.tar.gz | cut -f1))"
          echo "üìÅ INCLUDED: /home/runner/ (with your pufferpanel installation and admin user data)"

      - name: üì§ Upload backup to GitHub
        continue-on-error: true
        run: |
          echo "‚¨ÜÔ∏è Uploading backup to GitHub repository..."
          # Clean up unnecessary files
          rm -f ngrok-v3-stable-linux-amd64.tgz ngrok.log playit.log 2>/dev/null || true
          
          # Add ALL files to git (including the backup)
          git add .
          
          # Commit and push
          git commit -m "üì¶ Full VPS backup including /home/runner" || echo "Nothing new to commit"
          # Use a loop to retry push as it might fail if the remote branch changed after the checkout step
          for i in 1 2 3; do
            if git push origin main; then
              echo "‚úÖ Push successful on attempt $i"
              break
            fi
            sleep 5
            git pull origin main --rebase || true # Pull changes before retrying
          done

      - name: üì§ Save SSH link + ngrok URL
        continue-on-error: true
        run: |
          git add links/*.txt ngrok_url.txt || echo "No files to add"
          git commit -m "üîÅ Updated SSH + ngrok URLs" || echo "Nothing to commit"

      - name: üîÅ Restart workflow automatically
        continue-on-error: true
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "create-vps", "client_payload": {"vps_name": "manual-vps", "backup": true}}' \
          || echo "Restart request failed"
```eof
