name: Create VPS (Auto-Restart & Safe)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      TMATE_SERVER: nyc1.tmate.io

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 📁 Prepare dirs
        run: mkdir -p links .backup

      - name: 🛠️ Make backup script executable
        run: chmod +x backup-restore.sh

      - name: 💾 Restore backup (from transfer.sh link)
        continue-on-error: true
        run: ./backup-restore.sh restore_backup

      - name: 🔧 Setup System & Install Dependencies
        run: |
          echo "🚀 Setting up system and installing dependencies..."
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install -y curl
          echo "✅ System updated and dependencies installed"

      - name: 🔧 Install PufferPanel
        run: |
          echo "🚀 Installing PufferPanel..."
          curl -s https://raw.githubusercontent.com/abdalla435/VPS-Pterodactyl-EGG/main/vpsfree.sh > main.sh
          # Automate the PufferPanel installation
          echo -e "2\n8080\nthekirmada\nthekirmada2009\nxblankx79@gmail.com" | sudo bash main.sh
          echo "✅ PufferPanel installation completed"

      - name: 🔧 Install and Setup ngrok
        run: |
          echo "🚀 Installing ngrok..."
          # Install ngrok
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
            && echo "deb https://ngrok-agent.s3.amazonaws.com bookworm main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list \
            && sudo apt update \
            && sudo apt install -y ngrok
          
          echo "✅ ngrok installed"
          
          # Add authtoken
          ngrok config add-authtoken 2YtAp6D68sZQGP19tb6ArNsUu0K_7DxzsfFA52dXeYr6gbEEz
          echo "✅ ngrok authtoken configured"
          
          # Start ngrok tunnel in background
          nohup ngrok http http://localhost:8080 > ngrok.log 2>&1 &
          echo "✅ ngrok tunnel started on port 8080"

      - name: 🔐 Start tmate session
        run: |
          sudo apt update -y && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" | tee "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"

      - name: 🚀 Start Playit Tunnel
        run: |
          wget -q https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-linux-amd64 -O playit
          chmod +x playit
          nohup ./playit > playit.log 2>&1 &
          echo "✅ Playit started."

      - name: ⏳ Keep VPS alive (15 min safe period)
        run: |
          i=1
          while [ $i -le 15 ]; do
            echo "🟢 Running minute $i/15..."
            sleep 60
            i=$((i+1))
          done

      - name: 📦 COMPLETE PufferPanel + ngrok backup
        timeout-minutes: 15
        run: |
          echo "🚀 Creating COMPLETE PufferPanel + ngrok backup..."
          
          # Save package list (includes ngrok and all dependencies)
          mkdir -p backup_meta
          dpkg --get-selections > backup_meta/installed_packages.txt 2>/dev/null || true
          
          # Build list of directories that ACTUALLY exist
          BACKUP_DIRS="backup_meta"
          
          # Check and add directories that exist
          [ -d "/var/lib/pufferpanel" ] && BACKUP_DIRS="$BACKUP_DIRS /var/lib/pufferpanel"
          [ -d "/etc/pufferpanel" ] && BACKUP_DIRS="$BACKUP_DIRS /etc/pufferpanel"
          [ -f "/etc/apt/sources.list.d/ngrok.list" ] && BACKUP_DIRS="$BACKUP_DIRS /etc/apt/sources.list.d/ngrok.list"
          [ -f "/etc/apt/trusted.gpg.d/ngrok.asc" ] && BACKUP_DIRS="$BACKUP_DIRS /etc/apt/trusted.gpg.d/ngrok.asc"
          [ -d "/root/.ngrok2" ] && BACKUP_DIRS="$BACKUP_DIRS /root/.ngrok2"
          [ -f "/root/main.sh" ] && BACKUP_DIRS="$BACKUP_DIRS /root/main.sh"
          [ -f "/usr/bin/ngrok" ] && BACKUP_DIRS="$BACKUP_DIRS /usr/bin/ngrok"
          
          # Check for any user ngrok configs
          for user_dir in /home/*; do
            if [ -d "$user_dir/.ngrok2" ]; then
              BACKUP_DIRS="$BACKUP_DIRS $user_dir/.ngrok2"
            fi
          done
          
          echo "📦 Backing up: $BACKUP_DIRS"
          
          # Create backup of only existing files
          if [ "$BACKUP_DIRS" != "backup_meta" ]; then
            sudo tar -czf vps_backup.tar.gz $BACKUP_DIRS 2>/dev/null || true
          else
            echo "⚠️ No PufferPanel/ngrok files found, creating package list only"
            tar -czf vps_backup.tar.gz backup_meta/ 2>/dev/null || true
          fi
          
          echo "✅ Backup created successfully (size: $(du -h vps_backup.tar.gz | cut -f1))"

      - name: 📤 Upload backup to transfer.sh
        continue-on-error: true
        run: |
          echo "⬆️ Uploading backup..."
          # Check if backup file exists and is not empty
          if [ -s "vps_backup.tar.gz" ]; then
            UPLOAD_LINK=$(curl --silent --show-error --max-time 300 --retry 2 --upload-file vps_backup.tar.gz https://transfer.sh/vps_backup.tar.gz) || UPLOAD_LINK=""
            
            if [ -n "$UPLOAD_LINK" ]; then
              echo "$UPLOAD_LINK" > last_backup_url.txt
              echo "✅ Upload successful: $UPLOAD_LINK"
            else
              # Create a placeholder URL if upload fails
              echo "https://transfer.sh/backup_failed_$(date +%s)" > last_backup_url.txt
              echo "⚠️ Upload failed, created placeholder URL"
            fi
          else
            # Create a placeholder URL if backup file is empty/missing
            echo "https://transfer.sh/no_backup_$(date +%s)" > last_backup_url.txt
            echo "⚠️ Backup file missing or empty, created placeholder URL"
          fi

      - name: 🔄 Pull latest changes
        continue-on-error: true
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull --rebase origin main || echo "Pull failed - continuing"

      - name: 📤 Save SSH link + backup URL
        continue-on-error: true
        run: |
          git add links/*.txt last_backup_url.txt || echo "No files to add"
          git commit -m "🔁 Updated SSH + backup URL" || echo "Nothing to commit"
          git push origin main || echo "Push failed - continuing"

      - name: 🔁 Restart workflow automatically
        continue-on-error: true
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "create-vps", "client_payload": {"vps_name": "manual-vps", "backup": true}}' \
          || echo "Restart request failed"
